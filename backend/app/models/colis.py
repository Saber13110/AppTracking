from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any
from datetime import datetime


class ColisBase(BaseModel):
    description: str


class ColisCreate(BaseModel):
    id: str = Field(..., description="Real FedEx tracking ID")
    description: Optional[str] = None
    # Alias fields will be generated by the service


class ColisUpdate(BaseModel):
    description: Optional[str] = None
    status: Optional[str] = None
    location: Optional[str] = None
    estimated_delivery: Optional[datetime] = None
    meta_data: Optional[Dict[str, Any]] = None


class ColisOut(ColisBase):
    id: str
    reference: str
    tcn: str
    code_barre: str
    status: str
    location: Optional[str] = None
    estimated_delivery: Optional[datetime] = None
    meta_data: Dict[str, Any] = Field(default_factory=dict)
    created_at: datetime
    updated_at: datetime

    class Config:
        from_attributes = True


class ColisFilter(BaseModel):
    status: Optional[str] = None
    location: Optional[str] = None
    reference: Optional[str] = None
    tcn: Optional[str] = None
    code_barre: Optional[str] = None
    page: int = Field(default=1, ge=1)
    page_size: int = Field(default=10, ge=1, le=100)


class ColisSearchResponse(BaseModel):
    items: List[ColisOut]
    total: int
    page: int
    page_size: int
    total_pages: int
